/*-----------------------------------------------------------------------------
 *
 *                      Gaia CU7 variability
 *
 *         Copyright (C) 2005-2020 Gaia Data Processing and Analysis Consortium
 *
 *
 * CU7 variability software is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * CU7 variability software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this CU7 variability software; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301  USA
 *
 *-----------------------------------------------------------------------------
 */

package test;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import source.LightCurve;
import source.FoldedLightCurve;

/**
 *
 * Tests for verifying the behaviour of the FoldedLightCurve class. This test
 * suite covers constructor validation, property calculations, taking expected
 * values from @juliaroquette's Python implementation.
 * 
 * @author Mate Madarasz
 * @version 1.0
 *
 */

public class FoldedLightCurveTest {
	private FoldedLightCurve flc;
	private final double delta = 1e-8;

	/**
	 * Sets up the testing environment before each test. This includes initializing
	 * a light curve and folding it with a specified period.
	 */
	@BeforeEach
	public void setUp() {
		final int N = 100;
		double[] time = new double[N];
		double[] mag = new double[N];
		double[] err = new double[N];
		boolean[] mask = new boolean[N];
		final double period = 10.0;
		final double amplitude = 1.0;

		for (int i = 0; i < N; i++) {
			time[i] = 80.0 * i / (N - 1);
			mag[i] = 0.5 * amplitude * Math.sin(2 * Math.PI * time[i] / period);
			err[i] = 0.0;
			mask[i] = true;
		}

		LightCurve lc = new LightCurve(time, mag, err, mask);
		flc = new FoldedLightCurve(lc, period);
	}

	/**
	 * Tests the phase array generated by the FoldedLightCurve class for accuracy.
	 * Expected value was taken from the Python implementation
	 */
	@Test
	public void testPhaseArray() {
		double[] expectedPhases = { 0.0, 0.0, 0.01010101, 0.02020202, 0.03030303, 0.04040404, 0.05050505, 0.06060606,
				0.07070707, 0.08080808, 0.09090909, 0.1010101, 0.11111111, 0.12121212, 0.13131313, 0.14141414,
				0.15151515, 0.16161616, 0.17171717, 0.18181818, 0.19191919, 0.2020202, 0.21212121, 0.22222222,
				0.23232323, 0.24242424, 0.25252525, 0.26262626, 0.27272727, 0.28282828, 0.29292929, 0.3030303,
				0.31313131, 0.32323232, 0.33333333, 0.34343434, 0.35353535, 0.36363636, 0.37373737, 0.38383838,
				0.39393939, 0.4040404, 0.41414141, 0.42424242, 0.43434343, 0.44444444, 0.45454545, 0.46464646,
				0.47474747, 0.48484848, 0.49494949, 0.50505051, 0.51515152, 0.52525253, 0.53535354, 0.54545455,
				0.55555556, 0.56565657, 0.57575758, 0.58585859, 0.5959596, 0.60606061, 0.61616162, 0.62626263,
				0.63636364, 0.64646465, 0.65656566, 0.66666667, 0.67676768, 0.68686869, 0.6969697, 0.70707071,
				0.71717172, 0.72727273, 0.73737374, 0.74747475, 0.75757576, 0.76767677, 0.77777778, 0.78787879,
				0.7979798, 0.80808081, 0.81818182, 0.82828283, 0.83838384, 0.84848485, 0.85858586, 0.86868687,
				0.87878788, 0.88888889, 0.8989899, 0.90909091, 0.91919192, 0.92929293, 0.93939394, 0.94949495,
				0.95959596, 0.96969697, 0.97979798, 0.98989899 };
		Assertions.assertArrayEquals(expectedPhases, flc.getPhase(), delta,
				"Phase array does not match expected values.");
	}

	/**
	 * Tests the magnitude values of the folded light curve for accuracy. Expected
	 * value was taken from the Python implementation
	 */
	@Test
	public void testMagPhased() {
		double[] expectedMagPhased = { 0.0, -9.79717439e-16, 3.17119598e-02, 6.32962268e-02, 9.46256222e-02,
				1.25573994e-01, 1.56016723e-01, 1.85831228e-01, 2.14897456e-01, 2.43098368e-01, 2.70320409e-01,
				2.96453965e-01, 3.21393805e-01, 3.45039506e-01, 3.67295854e-01, 3.88073232e-01, 4.07287976e-01,
				4.24862715e-01, 4.40726682e-01, 4.54815998e-01, 4.67073930e-01, 4.77451121e-01, 4.85905784e-01,
				4.92403877e-01, 4.96919232e-01, 4.99433670e-01, 4.99937064e-01, 4.98427388e-01, 4.94910721e-01,
				4.89401223e-01, 4.81921079e-01, 4.72500409e-01, 4.61177147e-01, 4.47996887e-01, 4.33012702e-01,
				4.16284927e-01, 3.97880920e-01, 3.77874787e-01, 3.56347086e-01, 3.33384500e-01, 3.09079493e-01,
				2.83529932e-01, 2.56838696e-01, 2.29113261e-01, 2.00465268e-01, 1.71010072e-01, 1.40866278e-01,
				1.10155266e-01, 7.90006980e-02, 4.75280217e-02, 1.58639667e-02, -1.58639667e-02, -4.75280217e-02,
				-7.90006980e-02, -1.10155266e-01, -1.40866278e-01, -1.71010072e-01, -2.00465268e-01, -2.29113261e-01,
				-2.56838696e-01, -2.83529932e-01, -3.09079493e-01, -3.33384500e-01, -3.56347086e-01, -3.77874787e-01,
				-3.97880920e-01, -4.16284927e-01, -4.33012702e-01, -4.47996887e-01, -4.61177147e-01, -4.72500409e-01,
				-4.81921079e-01, -4.89401223e-01, -4.94910721e-01, -4.98427388e-01, -4.99937064e-01, -4.99433670e-01,
				-4.96919232e-01, -4.92403877e-01, -4.85905784e-01, -4.77451121e-01, -4.67073930e-01, -4.54815998e-01,
				-4.40726682e-01, -4.24862715e-01, -4.07287976e-01, -3.88073232e-01, -3.67295854e-01, -3.45039506e-01,
				-3.21393805e-01, -2.96453965e-01, -2.70320409e-01, -2.43098368e-01, -2.14897456e-01, -1.85831228e-01,
				-1.56016723e-01, -1.25573994e-01, -9.46256222e-02, -6.32962268e-02, -3.17119598e-02 };
		Assertions.assertArrayEquals(expectedMagPhased, flc.getMagPhased(), delta,
				"MagPhased array does not match expected values.");
	}

	/**
	 * Tests the error values of the folded light curve to ensure they are correctly
	 * set to zero.
	 */
	@Test
	public void testErrPhased() {
		double[] expectedErrPhased = new double[100];
		Assertions.assertArrayEquals(expectedErrPhased, flc.getErrPhased(), delta,
				"ErrPhased array does not match expected values.");
	}
}
